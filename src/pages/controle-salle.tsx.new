// Page de contrôle des salles de classe pour Smart Salle
import type { SelectChangeEvent } from '@mui/material/Select';

import { useState, useEffect } from 'react';

import Grid from '@mui/material/Grid';
import Container from '@mui/material/Container';
import Typography from '@mui/material/Typography';
import AcUnitIcon from '@mui/icons-material/AcUnit';
import VideocamIcon from '@mui/icons-material/Videocam';
import ThermostatIcon from '@mui/icons-material/Thermostat';
import WaterIcon from '@mui/icons-material/Water';
import AirIcon from '@mui/icons-material/Air';
import { Box, Card, Paper, Stack, Alert, Switch, CardHeader, CardContent, LinearProgress, Divider, Tooltip } from '@mui/material';

import { useSensorData } from 'src/hooks/useSensorData';

import { CONFIG } from 'src/config-global';
import { roomService } from 'src/services/roomService';

// Interface pour Salle
interface Salle {
  id: string;
  nom: string;
  equipements?: {
    climatiseur?: { actif: boolean };
    projecteur?: { actif: boolean };
  };
}

// Interface pour les données de capteurs
interface SensorDataType {
  temperature: number | null;
  humidity: number | null;
  airQuality: number | null;
  loading: boolean;
  error: string | null;
  isTemperatureNormal: boolean;
  isHumidityNormal: boolean;
  isAirQualityNormal: boolean;
}

// Interface pour la réponse du toggle des équipements
interface ToggleResponse {
  success: boolean;
  erreur?: string;
}

export default function ControleSallePage() {
  const [salleSelectionnee, setSalleSelectionnee] = useState<string>('');
  const [salles, setSalles] = useState<Salle[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [climatiseurActif, setClimatiseurActif] = useState<boolean>(false);
  const [projecteurActif, setProjecteurActif] = useState<boolean>(false);

  const {
    temperature,
    humidity,
    airQuality,
    loading: loadingSensors,
    error: errorSensors,
    isTemperatureNormal,
    isHumidityNormal,
    isAirQualityNormal,
  } = useSensorData(salleSelectionnee) as SensorDataType;

  useEffect(() => {
    const fetchSalles = async (): Promise<void> => {
      try {
        setLoading(true);
        setError(null);
        const response = await roomService.getSalles();
        if (response.salles && response.salles.length > 0) {
          // Cast des salles avant traitement pour éviter les erreurs de typage
          const sallesBrutes = response.salles as Array<any>;
          
          // S'assurer que les salles récupérées ont toutes les propriétés requises
          const sallesTypees = sallesBrutes.map(salle => ({
            id: salle.id,
            nom: salle.nom || `Salle ${salle.id}`, // Valeur par défaut si nom n'existe pas
            equipements: salle.equipements || {}
          })) as Salle[];
          
          setSalles(sallesTypees);
          setSalleSelectionnee(sallesTypees[0].id);
        } else {
          setError("Aucune salle disponible");
        }
      } catch (err) {
        setError("Erreur lors du chargement des salles");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchSalles();
  }, []);

  useEffect(() => {
    if (!salleSelectionnee) return;

    // Définition de l'interface pour les données de salle mise à jour
    interface SalleData {
      equipements?: {
        climatiseur?: { actif: boolean };
        projecteur?: { actif: boolean };
      };
    }
    
    const unsubscribe: (() => void) = roomService.onSalleChange(salleSelectionnee, (data: SalleData) => {
      if (data && data.equipements) {
        setClimatiseurActif(data.equipements.climatiseur?.actif || false);
        setProjecteurActif(data.equipements.projecteur?.actif || false);
      }
    });

    // eslint-disable-next-line consistent-return
    return () => {
      if (typeof unsubscribe === 'function') {
        unsubscribe();
      }
    };
  }, [salleSelectionnee]);

  // Mise à jour du titre de la page
  useEffect(() => {
    document.title = `Contrôle des salles - ${CONFIG.appName}`;
  }, []);

  const handleChangeSalle = (event: SelectChangeEvent<string>) => {
    setSalleSelectionnee(event.target.value);
  };

  const handleToggleClimatiseur = async (): Promise<void> => {
    try {
      const response = await roomService.toggleClimatiseur(salleSelectionnee);
      if (!response.success && response.erreur) {
        setError(`Erreur lors de la modification du climatiseur: ${response.erreur}`);
      }
    } catch (err) {
      setError("Erreur de communication avec le serveur");
      console.error(err);
    }
  };

  const handleToggleProjecteur = async (): Promise<void> => {
    try {
      const response = await roomService.toggleProjecteur(salleSelectionnee);
      if (!response.success && response.erreur) {
        setError(`Erreur lors de la modification du vidéoprojecteur: ${response.erreur}`);
      }
    } catch (err) {
      setError("Erreur de communication avec le serveur");
      console.error(err);
    }
  };

  return (
    <>
      <Container maxWidth="xl">
        <Typography variant="h4" sx={{ mb: 5 }}>
          Contrôle des salles
        </Typography>

        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
        )}

        <Grid container spacing={3}>
          {/* Sélection de la salle */}
          <Grid item xs={12} sx={{ mb: 3 }}>
            <Typography variant="h6" gutterBottom>
              Sélectionner une salle
            </Typography>
            
            <Paper elevation={0} sx={{ p: 1, bgcolor: 'background.neutral' }}>
              <Typography variant="body2" sx={{ color: 'text.secondary', fontStyle: 'italic', mb: 2 }}>
                Cliquez sur une salle pour afficher ses détails et contrôler ses équipements
              </Typography>
              
              {loading ? (
                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                  <LinearProgress sx={{ width: '50%' }} />
                </Box>
              ) : salles.length === 0 ? (
                <Alert severity="info">Aucune salle disponible</Alert>
              ) : (
                <Grid container spacing={2}>
                  {salles.map((salle) => (
                    <Grid item xs={12} sm={6} md={4} lg={3} key={salle.id}>
                      <Card 
                        sx={{
                          cursor: 'pointer',
                          transition: 'transform 0.3s, box-shadow 0.3s',
                          borderColor: salleSelectionnee === salle.id ? 'primary.main' : 'divider',
                          borderWidth: salleSelectionnee === salle.id ? 2 : 1,
                          borderStyle: 'solid',
                          bgcolor: salleSelectionnee === salle.id ? 'action.selected' : 'background.paper',
                          '&:hover': {
                            transform: 'translateY(-4px)',
                            boxShadow: (theme) => theme.customShadows.z16,
                          },
                        }}
                        onClick={() => handleChangeSalle({ target: { value: salle.id } } as SelectChangeEvent)}
                      >
                        <CardContent>
                          <Typography variant="h6" align="center" noWrap>
                            {salle.nom || `Salle ${salle.id}`}
                          </Typography>
                          <Box sx={{ mt: 2, display: 'flex', justifyContent: 'center', gap: 2 }}>
                            <Tooltip title={salle?.equipements?.climatiseur?.actif ? "Climatiseur actif" : "Climatiseur inactif"}>
                              <AcUnitIcon 
                                color={salle?.equipements?.climatiseur?.actif ? "primary" : "disabled"} 
                                fontSize="small" 
                              />
                            </Tooltip>
                            <Tooltip title={salle?.equipements?.projecteur?.actif ? "Vidéoprojecteur actif" : "Vidéoprojecteur inactif"}>
                              <VideocamIcon 
                                color={salle?.equipements?.projecteur?.actif ? "primary" : "disabled"} 
                                fontSize="small" 
                              />
                            </Tooltip>
                          </Box>
                        </CardContent>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              )}
            </Paper>
          </Grid>
          
          {/* Contrôle des équipements */}
          <Grid item xs={12} md={6}>
            <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
              <CardHeader 
                title="Contrôle des équipements" 
                subheader={salleSelectionnee ? `${salles.find(s => s.id === salleSelectionnee)?.nom || 'Salle'}` : 'Aucune salle sélectionnée'}
              />
              {!salleSelectionnee ? (
                <Box sx={{ p: 3, display: 'flex', alignItems: 'center', justifyContent: 'center', flexGrow: 1 }}>
                  <Typography variant="body1" color="text.secondary">
                    Veuillez sélectionner une salle pour contrôler ses équipements
                  </Typography>
                </Box>
              ) : (
                <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>
                  <Stack spacing={3}>
                    {/* Climatiseur */}
                    <Paper 
                      variant="outlined" 
                      sx={{ 
                        p: 3, 
                        borderRadius: 2,
                        transition: 'all 0.3s',
                        borderColor: climatiseurActif ? 'primary.main' : 'divider',
                        bgcolor: climatiseurActif ? 'action.selected' : 'background.paper',
                      }}
                    >
                      <Stack spacing={2}>
                        <Stack direction="row" alignItems="center" spacing={2}>
                          <Box 
                            sx={{ 
                              bgcolor: climatiseurActif ? 'primary.lighter' : 'action.hover', 
                              borderRadius: '50%', 
                              p: 1,
                              display: 'flex',
                            }}
                          >
                            <AcUnitIcon color={climatiseurActif ? 'primary' : 'disabled'} fontSize="large" />
                          </Box>
                          <Stack sx={{ flexGrow: 1 }}>
                            <Typography variant="h6">Climatiseur</Typography>
                            <Typography variant="body2" color="text.secondary">
                              {climatiseurActif ? 'Activé' : 'Désactivé'}
                            </Typography>
                          </Stack>
                          <Switch
                            checked={climatiseurActif}
                            onChange={handleToggleClimatiseur}
                            color="primary"
                            disabled={!salleSelectionnee}
                          />
                        </Stack>
                        <Typography variant="caption" color="text.secondary">
                          {climatiseurActif 
                            ? 'Le climatiseur est actuellement en fonctionnement. La température est régulée automatiquement.' 
                            : 'Le climatiseur est actuellement éteint. Activez-le pour réguler la température de la salle.'}
                        </Typography>
                      </Stack>
                    </Paper>

                    {/* Vidéoprojecteur */}
                    <Paper 
                      variant="outlined" 
                      sx={{ 
                        p: 3, 
                        borderRadius: 2,
                        transition: 'all 0.3s',
                        borderColor: projecteurActif ? 'primary.main' : 'divider',
                        bgcolor: projecteurActif ? 'action.selected' : 'background.paper',
                      }}
                    >
                      <Stack spacing={2}>
                        <Stack direction="row" alignItems="center" spacing={2}>
                          <Box 
                            sx={{ 
                              bgcolor: projecteurActif ? 'primary.lighter' : 'action.hover', 
                              borderRadius: '50%', 
                              p: 1,
                              display: 'flex',
                            }}
                          >
                            <VideocamIcon color={projecteurActif ? 'primary' : 'disabled'} fontSize="large" />
                          </Box>
                          <Stack sx={{ flexGrow: 1 }}>
                            <Typography variant="h6">Vidéoprojecteur</Typography>
                            <Typography variant="body2" color="text.secondary">
                              {projecteurActif ? 'Activé' : 'Désactivé'}
                            </Typography>
                          </Stack>
                          <Switch
                            checked={projecteurActif}
                            onChange={handleToggleProjecteur}
                            color="primary"
                            disabled={!salleSelectionnee}
                          />
                        </Stack>
                        <Typography variant="caption" color="text.secondary">
                          {projecteurActif 
                            ? 'Le vidéoprojecteur est actuellement allumé. Prêt pour les présentations.' 
                            : 'Le vidéoprojecteur est actuellement éteint. Activez-le pour commencer une présentation.'}
                        </Typography>
                      </Stack>
                    </Paper>
                  </Stack>
                </CardContent>
              )}
            </Card>
          </Grid>

          {/* Conditions environnementales */}
          <Grid item xs={12} md={6}>
            <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
              <CardHeader title="Conditions environnementales" />
              <CardContent>
                <Stack spacing={3}>
                  {!salleSelectionnee ? (
                    <Box sx={{ p: 3, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                      <Typography variant="body1" color="text.secondary">
                        Veuillez sélectionner une salle pour voir les conditions environnementales
                      </Typography>
                    </Box>
                  ) : loadingSensors ? (
                    <Box sx={{ width: '100%', display: 'flex', justifyContent: 'center' }}>
                      <LinearProgress sx={{ width: '50%' }} />
                    </Box>
                  ) : errorSensors ? (
                    <Alert severity="warning">{errorSensors}</Alert>
                  ) : (
                    <Stack spacing={3}>
                      {/* Température */}
                      <Paper 
                        variant="outlined" 
                        sx={{ 
                          p: 3, 
                          borderRadius: 2,
                          borderColor: isTemperatureNormal ? 'success.main' : 'warning.main'
                        }}
                      >
                        <Stack direction="row" alignItems="center" spacing={2}>
                          <Box 
                            sx={{ 
                              bgcolor: isTemperatureNormal ? 'success.lighter' : 'warning.lighter', 
                              borderRadius: '50%', 
                              p: 1,
                              display: 'flex',
                            }}
                          >
                            <ThermostatIcon color={isTemperatureNormal ? 'success' : 'warning'} fontSize="large" />
                          </Box>
                          <Stack sx={{ flexGrow: 1 }}>
                            <Typography variant="h6">Température</Typography>
                            <Typography variant="body2" color="text.secondary">
                              {temperature ? `${temperature.toFixed(1)}°C` : 'Non disponible'}
                            </Typography>
                          </Stack>
                          <Typography 
                            variant="h4" 
                            color={isTemperatureNormal ? 'success.main' : 'warning.main'}
                          >
                            {temperature ? `${Math.round(temperature)}°` : '--'}
                          </Typography>
                        </Stack>
                        <Divider sx={{ my: 2 }} />
                        <Typography variant="caption" color="text.secondary">
                          {isTemperatureNormal 
                            ? 'La température est dans la plage normale pour une salle de classe.' 
                            : 'La température est anormale. Un ajustement du climatiseur peut être nécessaire.'}
                        </Typography>
                      </Paper>

                      {/* Humidité */}
                      <Paper 
                        variant="outlined" 
                        sx={{ 
                          p: 3, 
                          borderRadius: 2,
                          borderColor: isHumidityNormal ? 'success.main' : 'warning.main'
                        }}
                      >
                        <Stack direction="row" alignItems="center" spacing={2}>
                          <Box 
                            sx={{ 
                              bgcolor: isHumidityNormal ? 'success.lighter' : 'warning.lighter', 
                              borderRadius: '50%', 
                              p: 1,
                              display: 'flex',
                            }}
                          >
                            <WaterIcon color={isHumidityNormal ? 'success' : 'warning'} fontSize="large" />
                          </Box>
                          <Stack sx={{ flexGrow: 1 }}>
                            <Typography variant="h6">Humidité</Typography>
                            <Typography variant="body2" color="text.secondary">
                              {humidity ? `${humidity.toFixed(1)}%` : 'Non disponible'}
                            </Typography>
                          </Stack>
                          <Typography 
                            variant="h4" 
                            color={isHumidityNormal ? 'success.main' : 'warning.main'}
                          >
                            {humidity ? `${Math.round(humidity)}%` : '--'}
                          </Typography>
                        </Stack>
                        <Divider sx={{ my: 2 }} />
                        <Typography variant="caption" color="text.secondary">
                          {isHumidityNormal 
                            ? 'Le niveau d\'humidité est dans la plage normale pour une salle de classe.' 
                            : 'Le niveau d\'humidité est anormal. Cela peut affecter le confort des occupants.'}
                        </Typography>
                      </Paper>

                      {/* Qualité de l'air */}
                      <Paper 
                        variant="outlined" 
                        sx={{ 
                          p: 3, 
                          borderRadius: 2,
                          borderColor: isAirQualityNormal ? 'success.main' : 'error.main'
                        }}
                      >
                        <Stack direction="row" alignItems="center" spacing={2}>
                          <Box 
                            sx={{ 
                              bgcolor: isAirQualityNormal ? 'success.lighter' : 'error.lighter', 
                              borderRadius: '50%', 
                              p: 1,
                              display: 'flex',
                            }}
                          >
                            <AirIcon color={isAirQualityNormal ? 'success' : 'error'} fontSize="large" />
                          </Box>
                          <Stack sx={{ flexGrow: 1 }}>
                            <Typography variant="h6">Qualité de l'air</Typography>
                            <Typography variant="body2" color="text.secondary">
                              {airQuality ? `${airQuality} ppm de CO2` : 'Non disponible'}
                            </Typography>
                          </Stack>
                          <Typography 
                            variant="h4" 
                            color={isAirQualityNormal ? 'success.main' : 'error.main'}
                          >
                            {airQuality ? `${Math.round(airQuality)}` : '--'}
                          </Typography>
                        </Stack>
                        <Divider sx={{ my: 2 }} />
                        <Typography variant="caption" color="text.secondary">
                          {isAirQualityNormal 
                            ? 'La qualité de l\'air est bonne. La ventilation est adéquate.' 
                            : 'La qualité de l\'air est mauvaise. Il est recommandé d\'aérer la salle.'}
                        </Typography>
                      </Paper>
                    </Stack>
                  )}
                </Stack>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Container>
    </>
  );
}
